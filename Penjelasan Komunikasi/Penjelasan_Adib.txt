Muhammad Adib Al Ghifari 18022014
I2C atau Inter-Integrated Circuit adalah sebuah teknologi yang diciptakan oleh perusahaan bernama PHILIPS. Tujuan utamanya adalah untuk memudahkan koneksi antara mikrokontroler, seperti komputer mini, dengan perangkat lain yang berfungsi sebagai penerima atau pengirim informasi. Untuk melakukan transfer data, I2C menggunakan dua kabel khusus yang disebut SDA dan SCL. Keduanya bekerja bersama-sama untuk mengirim dan menerima informasi antara perangkat dan bus komunikasi.
Contohnya adalah Inisialisasi Komunikasi: 
Pertama, kita akan menghubungkan sensor BMP180 dengan mikrokontroler melalui dua kabel I2C, yaitu SDA (Serial Data Line) dan SCL (Serial Clock Line). Pastikan koneksi telah sesuai.
Alamat Sensor: Setiap perangkat I2C memiliki alamat unik. Untuk BMP180, misalnya, alamat I2Cnya mungkin adalah 0x77 (atau bisa berbeda tergantung konfigurasi).
Memulai Komunikasi: Mikrokontroler, sebagai master I2C, akan memulai proses komunikasi dengan mengirimkan sinyal start ke bus I2C. Ini memberi tahu semua perangkat di bus bahwa transmisi data akan dimulai.
Mengirim Alamat: Setelah start bit dikirimkan, mikrokontroler akan mengirimkan alamat perangkat (dalam kasus kita, alamat BMP180) melalui bus I2C.
Membaca atau Menulis Data: Setelah sensor BMP180 dikenali, kita dapat meminta data dari sensor (seperti data tekanan atau suhu). Atau, kita mungkin ingin mengirimkan instruksi tertentu ke sensor untuk memulai pengukuran. Semua komunikasi ini terjadi melalui kabel SDA dan SCL.
Akhir Komunikasi: Setelah semua data yang diperlukan telah ditransfer, mikrokontroler akan mengirim sinyal stop ke bus I2C, menyelesaikan transaksi.

  Selain I2C, ada juga teknologi lain yang sering digunakan untuk tujuan komunikasi antar-perangkat, yaitu SPI atau Serial Peripheral Interface. SPI diciptakan oleh perusahaan MOTOROLA dan dikenal dengan keunggulannya dalam komunikasi yang cepat dan efisien. Meskipun menggunakan lebih banyak kabel dibandingkan I2C, yaitu sekitar 3 hingga 4 kabel, SPI memiliki kelebihan dalam fungsi perangkat kerasnya yang kuat. Dengan desainnya yang sinkron, pengiriman dan penerimaan data dapat dilakukan secara terkoordinasi dan efektif.
Contohnya adalah:
Misalkan kita memiliki mikrokontroler seperti Arduino dan kita ingin menghubungkannya dengan sebuah layar OLED yang menggunakan SPI untuk berkomunikasi.
Koneksi Fisik: Pertama, kita akan menghubungkan layar OLED ke mikrokontroler melalui beberapa kabel yang khas untuk SPI. Kabel-kabel ini termasuk MOSI (Master Out Slave In), MISO (Master In Slave Out), SCK (Serial Clock), dan CS (Chip Select). Pastikan semua koneksi sudah sesuai dan kabel terpasang dengan benar.
Inisialisasi Komunikasi: Sebelum memulai komunikasi, kita mungkin perlu mengatur beberapa parameter seperti kecepatan transmisi (baud rate) dan mode transfer data yang akan digunakan (ada beberapa mode yang berbeda dalam SPI).
Mengirim Data: Mikrokontroler, sebagai master SPI, akan mengirimkan data ke layar OLED. Misalnya, Anda ingin menampilkan teks atau gambar pada layar. Mikrokontroler akan mengirimkan setiap byte data secara serial ke layar melalui kabel MOSI selama periode clock.
Menerima Data: Terkadang, layar OLED (atau perangkat lainnya) mungkin perlu mengirimkan data kembali ke mikrokontroler. Ini dilakukan melalui kabel MISO. Saat mikrokontroler mengirimkan sinyal clock, data akan diterima dari layar ke mikrokontroler melalui kabel MISO.
Pengendalian dan Seleksi Perangkat: Kabel CS (Chip Select) memungkinkan mikrokontroler untuk memilih perangkat yang akan diajak berkomunikasi. Misalnya, jika kita memiliki beberapa perangkat SPI terhubung, kita bisa menggunakan sinyal CS untuk memilih perangkat mana yang akan berkomunikasi dengan mikrokontroler pada waktu tertentu.
Penutup Komunikasi: Setelah semua data yang diperlukan telah ditransfer, kita dapat menutup komunikasi SPI dengan mematikan sinyal clock atau mengatur sinyal CS sesuai kebutuhan.

  Selanjutnya, ada protokol komunikasi lain yang bernama UART atau Universal Asynchronous Reception and Transmission. Jika I2C dan SPI memiliki ciri khasnya masing-masing dalam hal kecepatan atau fungsi perangkat keras, UART dikenal karena kemudahannya. Protokol ini memungkinkan komunikasi dua arah antara host, seperti komputer atau mikrokontroler, dan perangkat tambahan. Dengan menggunakan dua jalur data yang berbeda, yaitu TX untuk pengiriman dan RX untuk penerimaan, UART memfasilitasi transmisi data secara asinkron.
Contohnya adalah jika kita memiliki komputer dan kita ingin menghubungkannya dengan modul Bluetooth untuk mengirim dan menerima data secara nirkabel. Untuk menghubungkan keduanya, kita akan menggunakan protokol UART.
Koneksi Fisik: kita akan menghubungkan pin TX (Transmit) dari komputer ke pin RX (Receive) pada modul Bluetooth, dan sebaliknya, pin RX dari komputer ke pin TX pada modul Bluetooth. Selain itu, pastikan kedua perangkat terhubung dengan catu daya yang sesuai.
Konfigurasi Baud Rate: Sebelum mulai berkomunikasi, kita harus memastikan bahwa kedua perangkat dikonfigurasi dengan kecepatan transmisi yang sama (baud rate), misalnya, 9600 bps. Ini memastikan bahwa kedua perangkat berbicara dengan kecepatan yang sama.
Transmisi Data: Saat kita ingin mengirim data dari komputer Anda ke modul Bluetooth, data yang akan dikirimkan akan masuk ke dalam buffer UART komputer. Setelah siap, komputer akan mengirim data bit per bit ke modul Bluetooth melalui pin TX.
Penerimaan Data: Sebaliknya, jika modul Bluetooth ingin mengirimkan data kembali ke komputer, data dari modul tersebut akan masuk melalui pin RX komputer. Komputer akan menerima data ini dan memasukkannya ke dalam buffer UART untuk diproses oleh perangkat lunak atau aplikasi yang berjalan.
Karakter Start dan Stop: Salah satu fitur penting dari UART adalah penggunaan bit start dan bit stop untuk menandai awal dan akhir setiap byte data. Meskipun disebut asinkron, dalam praktiknya, kedua perangkat harus disinkronkan mengenai bit start dan stop untuk memastikan data dikirimkan dan diterima dengan benar.
Pengiriman dan Penerimaan Data: Proses ini berlanjut, dengan komputer dan modul Bluetooth berkomunikasi secara terus-menerus melalui protokol UART. Setiap karakter atau data yang dikirimkan dari satu perangkat akan diterima oleh perangkat lain, memungkinkan pertukaran informasi.

  Terakhir, kita punya CAN atau Controller Area Network, sebuah teknologi yang awalnya dirancang khusus untuk dunia otomotif oleh produsen mobil. Namun, seiring perkembangan teknologi, CAN telah menemukan penerapannya di berbagai bidang lain seperti otomatisasi industri dan peralatan medis. Salah satu keunggulan utama dari CAN adalah kemampuannya untuk memungkinkan komunikasi antara mikrokontroler dan perangkat lain tanpa memerlukan komputer host sebagai perantara. Dengan protokol berbasis pesan, CAN memastikan bahwa informasi dikirimkan dan diterima dengan aman dan efisien.
Contohnya adalah jika kita berada dalam mobil modern yang dilengkapi dengan berbagai sistem otomotif, seperti sistem rem, sistem navigasi, dan sensor suhu mesin. Semua sistem ini perlu berkomunikasi satu sama lain untuk memastikan operasi mobil berjalan dengan lancar dan aman. Di balik layar, komunikasi ini seringkali didukung oleh protokol CAN.
Topologi Jaringan: Dalam kendaraan kita, ada banyak perangkat yang perlu berkomunikasi, seperti sensor, aktuator, dan kontroler. Semua perangkat ini terhubung dalam jaringan CAN yang membentang di seluruh kendaraan. Setiap perangkat dalam jaringan memiliki alamat unik, memungkinkan mereka untuk berkomunikasi dengan perangkat lain tanpa gangguan.
Pesan CAN: Sebagai contoh, saat ada kendala kita akan menekan pedal rem, sensor di pedal tersebut akan mengirimkan sinyal ke unit kontrol rem melalui jaringan CAN. Pesan ini akan berisi informasi tentang intensitas pengereman yang diperlukan.
Koordinasi Antarsistem: Setelah menerima pesan, unit kontrol rem akan memproses informasi tersebut dan mungkin akan berkoordinasi dengan sistem lain, seperti sistem traksi atau sistem stabilisasi, untuk memastikan pengereman yang aman dan efisien.
Pengiriman Pesan Multidireksional: Selain pengereman, sistem lain seperti sistem navigasi mungkin perlu mengirimkan informasi ke panel instrumen Anda tentang rute yang diambil atau kondisi lalu lintas. Sistem ini akan mengirim pesan melalui jaringan CAN untuk memastikan informasi yang tepat ditampilkan pada panel instrumen Anda.
Keandalan dan Keselamatan: Salah satu keunggulan utama dari CAN adalah keandalannya. Jika ada gangguan atau gangguan di satu bagian jaringan, sistem lain dapat terus beroperasi tanpa gangguan berkat struktur redundan dan kontrol kesalahan dalam protokol CAN. Hal ini sangat penting dalam konteks otomotif di mana kesalahan komunikasi dapat memiliki konsekuensi serius.






